{
  "problem_statement": {
    "title": "Q55. Flatten a Multilevel Doubly Linked List",
    "problemdescription": "You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below. Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.",
    "problemconstraint": "Constraints:\n- The number of nodes in the list is in the range [0, 1000].\n- -10^6 <= Node.val <= 10^6",
    "inputformat": "Input:\n- The head of a doubly linked list with or without child pointers.",
    "outputformat": "Output:\n- The head of the flattened doubly linked list.",
    "example": "Example:\n\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation: The multilevel doubly linked list is flattened to a single-level list."
  },
  "solution_approach": {
    "solution": "To flatten a multilevel doubly linked list, you can use a recursive or iterative approach. In the recursive approach, for each node, check if it has a child. If it does, flatten the child list and connect it to the next node. Continue this process until you reach the end of the list. In the iterative approach, use a stack to keep track of nodes with children. Pop a node from the stack, flatten its child if it has one, and connect it to the next node. Repeat this until the stack is empty.",
    "hint": "You can flatten a multilevel doubly linked list by using a recursive or iterative approach. In the recursive approach, for each node, check if it has a child. If it does, flatten the child list and connect it to the next node. Continue this process until you reach the end of the list. In the iterative approach, use a stack to keep track of nodes with children. Pop a node from the stack, flatten its child if it has one, and connect it to the next node. Repeat this until the stack is empty."
  },
  "solution": {
    "java": "Here's a Java solution to flatten a multilevel doubly linked list using an iterative approach:\n\n```java\npublic Node flatten(Node head) {\n    if (head == null) {\n        return null;\n    }\n    Node current = head;\n    Stack<Node> stack = new Stack<>();\n    while (current != null) {\n        if (current.child != null) {\n            Node child = current.child;\n            if (current.next != null) {\n                stack.push(current.next);\n            }\n            current.next = child;\n            child.prev = current;\n            current.child = null;\n        }\n        if (current.next == null && !stack.isEmpty()) {\n            Node next = stack.pop();\n            current.next = next;\n            next.prev = current;\n        }\n        current = current.next;\n    }\n    return head;\n}\n```\nThis Java code efficiently flattens a multilevel doubly linked list.",
    "python": "And here's a Python solution to flatten a multilevel doubly linked list using an iterative approach:\n\n```python\nclass Node:\n    def flatten(self, head):\n        if not head:\n            return None\n        current = head\n        stack = []\n        while current:\n            if current.child:\n                child = current.child\n                if current.next:\n                    stack.append(current.next)\n                current.next = child\n                child.prev = current\n                current.child = None\n            if not current.next and stack:\n                next_node = stack.pop()\n                current.next = next_node\n                next_node.prev = current\n            current = current.next\n        return head\n```\nThis Python code effectively flattens a multilevel doubly linked list."
  },
  "extras": {
    "asked": "Flattening a multilevel doubly linked list is a frequently asked coding interview question. It tests your understanding of linked list traversal and manipulation.",
    "sdesheet": "This problem is commonly included in coding practice sheets to help candidates practice linked list flattening techniques.",
    "relatedlinks": "Related Links:\n- [LeetCode Flatten a Multilevel Doubly Linked List Problem](https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/)\n- [GeeksforGeeks Flatten a Multilevel Doubly Linked List Article](https://www.geeksforgeeks.org/flatten-a-multi-level-doubly-linked-list/)\n- [HackerRank Flatten a Multilevel Doubly Linked List Challenge](https://www.hackerrank.com/challenges/flatten-a-multilevel-doubly-linked-list)"
  }
}
