{
  "problem_statement": {
    "title": "Q61. Convert Sorted Array to Binary Search Tree",
    "problemdescription": "Given an integer array `nums` sorted in ascending order, convert it to a binary search tree (BST).",
    "problemconstraint": "Constraints:\n- 1 <= nums.length <= 10^4\n- -10^4 <= nums[i] <= 10^4\n- nums is sorted in ascending order.",
    "inputformat": "Input:\n- An integer array `nums` sorted in ascending order.",
    "outputformat": "Output:\n- Return the root node of the Binary Search Tree (BST).",
    "example": "Example:\n\nInput: nums = [-10, -3, 0, 5, 9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: The binary search tree can be constructed as follows:\n      0\n     / \\n   -3   9\n   /   /\n -10  5"
  },
  "solution_approach": {
    "solution": "To convert a sorted array to a Binary Search Tree (BST), you can use a recursive approach. Find the middle element of the array to make it the root of the BST. Recursively repeat the process for the left and right halves of the array, making the middle element of each subarray the root of its respective subtree.",
    "hint": "To efficiently find the middle element of the array, use two pointers, one slow pointer and one fast pointer, to traverse the array."
  },
  "solution": {
    "java": "Here's a Java solution to convert a sorted array to a Binary Search Tree (BST):\n\n```java\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        return sortedArrayToBST(nums, 0, nums.length - 1);\n    }\n\n    private TreeNode sortedArrayToBST(int[] nums, int left, int right) {\n        if (left > right) {\n            return null;\n        }\n        int mid = left + (right - left) / 2;\n        TreeNode root = new TreeNode(nums[mid]);\n        root.left = sortedArrayToBST(nums, left, mid - 1);\n        root.right = sortedArrayToBST(nums, mid + 1, right);\n        return root;\n    }\n}\n```\nThis Java code efficiently converts a sorted array to a Binary Search Tree.",
    "python": "And here's a Python solution to convert a sorted array to a Binary Search Tree (BST):\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\n        return self.helper(nums, 0, len(nums) - 1)\n\n    def helper(self, nums: List[int], left: int, right: int) -> TreeNode:\n        if left > right:\n            return None\n        mid = left + (right - left) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.helper(nums, left, mid - 1)\n        root.right = self.helper(nums, mid + 1, right)\n        return root\n```\nThis Python code effectively converts a sorted array to a Binary Search Tree."
  },
  "extras": {
    "asked": "Converting a sorted array to a Binary Search Tree (BST) is a common interview question that assesses your understanding of binary trees and recursive algorithms.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice tree-related algorithms and recursive techniques.",
    "relatedlinks": "Related Links:\n- [LeetCode Convert Sorted Array to Binary Search Tree Problem](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/)\n- [GeeksforGeeks Convert Sorted Array to Binary Search Tree Article](https://www.geeksforgeeks.org/sorted-array-to-balanced-bst/)"
  }
}
