{
  "problem_statement": {
    "title": "Q63. Implement a Prefix Tree (Trie) with Insert, Search, and Delete Operations",
    "problemdescription": "Design and implement a Trie (prefix tree) data structure with the following operations:\n\n1. `insert(word: str)`: Inserts a word into the Trie.\n2. `search(word: str)`: Returns `true` if the word is in the Trie, and `false` otherwise.\n3. `delete(word: str)`: Deletes a word from the Trie if it exists.",
    "problemconstraint": "Constraints:\n- All inputs consist of lowercase letters `a-z`.\n- The word inputs consist of non-empty strings.",
    "inputformat": "Input:\n- You will implement a `Trie` class with the described methods.",
    "outputformat": "Output:\n- For the `search` and `delete` methods, return a boolean value (true or false) indicating success or failure.",
    "example": "Example:\n\n```python\ntrie = Trie()\ntrie.insert('apple')\ntrie.search('apple')  # Output: True\ntrie.search('app')    # Output: False\ntrie.delete('apple')  # Output: True\ntrie.search('apple')  # Output: False\n```"
  },
  "solution_approach": {
    "solution": "To implement a Trie (prefix tree) with insert, search, and delete operations, create a `TrieNode` class to represent each node in the Trie. The `Trie` class should have methods for `insert`, `search`, and `delete`, which involve traversing the Trie from the root node and updating the node pointers accordingly. The `search` method checks for the presence of a word, and the `delete` method removes a word by marking the last character node as non-end of a word and recursively deleting unnecessary nodes.",
    "hint": "To efficiently implement the Trie data structure, consider using a dictionary (or an array) to store child nodes of a TrieNode. You can also maintain an `isEnd` flag in each TrieNode to indicate the end of a word."
  },
  "solution": {
    "java": "Here's a Java solution to implement a Trie (prefix tree) with insert, search, and delete operations:\n\n```java\nclass TrieNode {\n    TrieNode[] children;\n    boolean isEnd;\n\n    public TrieNode() {\n        children = new TrieNode[26];\n        isEnd = false;\n    }\n}\n\nclass Trie {\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n        node.isEnd = true;\n    }\n\n    public boolean search(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                return false;\n            }\n            node = node.children[index];\n        }\n        return node.isEnd;\n    }\n\n    public boolean delete(String word) {\n        return delete(root, word, 0);\n    }\n\n    private boolean delete(TrieNode node, String word, int index) {\n        if (index == word.length()) {\n            if (!node.isEnd) {\n                return false; // Word not found\n            }\n            node.isEnd = false;\n            return true;\n        }\n        char c = word.charAt(index);\n        int childIndex = c - 'a';\n        TrieNode child = node.children[childIndex];\n        if (child == null) {\n            return false; // Word not found\n        }\n        boolean canDelete = delete(child, word, index + 1);\n        if (canDelete) {\n            node.children[childIndex] = null;\n            return Arrays.stream(node.children).noneMatch(Objects::nonNull) && !node.isEnd;\n        }\n        return false;\n    }\n}\n```\nThis Java code efficiently implements a Trie with insert, search, and delete operations.",
    "python": "And here's a Python solution to implement a Trie (prefix tree) with insert, search, and delete operations:\n\n```python\nclass TrieNode:\n    def __init__(self):\n        self.children = [None] * 26\n        self.isEnd = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            index = ord(char) - ord('a')\n            if not node.children[index]:\n                node.children[index] = TrieNode()\n            node = node.children[index]\n        node.isEnd = True\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for char in word:\n            index = ord(char) - ord('a')\n            if not node.children[index]:\n                return False\n            node = node.children[index]\n        return node.isEnd\n\n    def delete(self, word: str) -> bool:\n        return self._delete(self.root, word, 0)\n\n    def _delete(self, node, word, index):\n        if index == len(word):\n            if not node.isEnd:\n                return False  # Word not found\n            node.isEnd = False\n            return all(child is None for child in node.children)\n        char = word[index]\n        char_index = ord(char) - ord('a')\n        child = node.children[char_index]\n        if not child:\n            return False  # Word not found\n        can_delete = self._delete(child, word, index + 1)\n        if can_delete:\n            node.children[char_index] = None\n            return not any(child is not None for child in node.children) and not node.isEnd\n        return False\n```\nThis Python code effectively implements a Trie with insert, search, and delete operations."
  },
  "extras": {
    "asked": "Implementing a Trie (prefix tree) with insert, search, and delete operations is a common interview question that assesses your understanding of data structures and string manipulation.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice Trie data structure and related operations.",
    "relatedlinks": "Related Links:\n- [LeetCode Implement Trie (Prefix Tree) Problem](https://leetcode.com/problems/implement-trie-prefix-tree/)\n- [GeeksforGeeks Trie Data Structure Article](https://www.geeksforgeeks.org/trie-insert-and-search/)"
  }
}
