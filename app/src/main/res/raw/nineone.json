{
  "problem_statement": {
    "title": "Q51. Detect a Cycle in a Linked List",
    "problemdescription": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.",
    "problemconstraint": "Constraints:\n- The number of nodes in the list is in the range [0, 10^4].\n- -10^5 <= Node.val <= 10^5",
    "inputformat": "Input:\n- The head of a linked list.",
    "outputformat": "Output:\n- Return true if there is a cycle in the linked list; otherwise, return false.",
    "example": "Example:\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the second node."
  },
  "solution_approach": {
    "solution": "To detect a cycle in a linked list, you can use Floyd's cycle-finding algorithm (tortoise and hare). Initialize two pointers, slow and fast, both initially at the head. Move slow one step at a time and fast two steps at a time. If there is a cycle, they will eventually meet at the same node. If there is no cycle, the fast pointer will reach the end of the list. Return true if they meet and false otherwise.",
    "hint": "You can use Floyd's cycle-finding algorithm (tortoise and hare) to detect a cycle in a linked list. Initialize two pointers, slow and fast, both initially at the head. Move slow one step at a time and fast two steps at a time. If there is a cycle, they will eventually meet at the same node. If there is no cycle, the fast pointer will reach the end of the list. Return true if they meet and false otherwise."
  },
  "solution": {
    "java": "Here's a Java solution to detect a cycle in a linked list using Floyd's algorithm:\n\n```java\npublic boolean hasCycle(ListNode head) {\n    if (head == null || head.next == null) {\n        return false;\n    }\n    ListNode slow = head;\n    ListNode fast = head.next;\n    while (slow != fast) {\n        if (fast == null || fast.next == null) {\n            return false;\n        }\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    return true;\n}\n```\nThis Java code efficiently detects a cycle in a linked list.",
    "python": "And here's a Python solution to detect a cycle in a linked list using Floyd's algorithm:\n\n```python\nclass ListNode:\n    def hasCycle(self, head):\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n```\nThis Python code effectively detects a cycle in a linked list."
  },
  "extras": {
    "asked": "Detecting a cycle in a linked list is a common coding interview question. It tests your knowledge of linked list traversal techniques.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice cycle detection algorithms in linked lists.",
    "relatedlinks": "Related Links:\n- [LeetCode Linked List Cycle Problem](https://leetcode.com/problems/linked-list-cycle/)\n- [GeeksforGeeks Detect a Cycle in a Linked List Article](https://www.geeksforgeeks.org/detect-loop-in-a-linked-list/)\n- [HackerRank Detect a Cycle in a Linked List Challenge](https://www.hackerrank.com/challenges/detect-whether-a-linked-list-contains-a-cycle)"
  }
}
