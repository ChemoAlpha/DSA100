{
  "problem_statement": {
    "title": "Q44. Searching in a 2D Matrix",
    "problemdescription": "Write an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:\n- Integers in each row are sorted in ascending order from left to right.\n- Integers in each column are sorted in ascending order from top to bottom.",
    "problemconstraint": "Constraints:\n- You must implement binary search and not sequential search.",
    "inputformat": "Input:\n- An m x n integer matrix (matrix) where 1 <= m, n <= 300 and -10^9 <= matrix[i][j] <= 10^9.\n- An integer target.",
    "outputformat": "Output:\n- Return true if the target is found in the matrix; otherwise, return false.",
    "example": "Example:\n\nInput: matrix = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], target = 5\nOutput: true\nExplanation: The target '5' is found in the matrix."
  },
  "solution_approach": {
    "solution": "To search efficiently in a 2D matrix with sorted rows and columns, you can start from the top-right corner and move left or down based on the comparison with the target. This approach ensures that you eliminate rows and columns in each step.",
    "hint": "Start from the top-right corner and use comparisons to eliminate rows or columns in each step."
  },
  "solution": {
    "java": "Here's a Java solution for searching in a 2D matrix with sorted rows and columns:\n\n```java\npublic boolean searchMatrix(int[][] matrix, int target) {\n    int row = 0;\n    int col = matrix[0].length - 1;\n    while (row < matrix.length && col >= 0) {\n        int num = matrix[row][col];\n        if (num == target) {\n            return true;\n        } else if (num < target) {\n            row++;\n        } else {\n            col--;\n        }\n    }\n    return false; // Target not found\n}\n```\nThis Java code efficiently searches for the target in a 2D matrix with sorted rows and columns.",
    "python": "And here's a Python solution for searching in a 2D matrix with sorted rows and columns:\n\n```python\ndef searchMatrix(matrix, target):\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        num = matrix[row][col]\n        if num == target:\n            return True\n        elif num < target:\n            row += 1\n        else:\n            col -= 1\n    return False  # Target not found\n```\nThis Python code effectively searches for the target in a 2D matrix with sorted rows and columns."
  },
  "extras": {
    "asked": "Searching in a 2D matrix with sorted rows and columns is a common coding interview question. It tests your problem-solving skills and understanding of binary search.",
    "sdesheet": "This problem is frequently included in coding practice sheets to help candidates practice searching in 2D arrays.",
    "relatedlinks": "Related Links:\n- [LeetCode Search in a 2D Matrix Problem](https://leetcode.com/problems/search-a-2d-matrix-ii/)\n- [GeeksforGeeks Search in a 2D Matrix Article](https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/)\n- [HackerRank Search in a 2D Matrix Challenge](https://www.hackerrank.com/challenges/search-a-2d-matrix-ii)"
  }
}
