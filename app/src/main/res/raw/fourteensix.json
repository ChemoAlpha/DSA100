{
  "problem_statement": {
    "title": "Q87. Edit Distance between Two Strings using Dynamic Programming",
    "problemdescription": "Given two words `word1` and `word2`, find the minimum number of operations required to convert `word1` to `word2`. You have the following three operations available:\n\n1. Insert a character\n2. Delete a character\n3. Replace a character",
    "problemconstraint": "Constraints:\n- The input words `word1` and `word2` have lengths `m` and `n` (1 <= m, n <= 500).",
    "inputformat": "Input:\n- Two strings, `word1` and `word2`.",
    "outputformat": "Output:\n- Return an integer representing the minimum number of operations (edits) required to convert `word1` to `word2`.",
    "example": "Example:\n\n```python\nInput: word1 = 'horse', word2 = 'ros'\nOutput: 3\nExplanation: To convert 'horse' to 'ros', you can perform the following operations:\n- Replace 'h' with 'r'\n- Insert 'o' after 'r'\n- Remove 'e'\n```"
  },
  "solution_approach": {
    "solution": "To find the minimum edit distance between two strings using dynamic programming, you can create a two-dimensional array `dp` where `dp[i][j]` represents the minimum number of operations to convert the first `i` characters of `word1` to the first `j` characters of `word2`. Initialize the `dp` array with appropriate values based on the base cases (i.e., when one or both strings are empty). Then, iterate through the characters of `word1` and `word2` and fill in the `dp` array based on the following rules:\n- If the characters at the current positions are equal (`word1[i-1] == word2[j-1]`), no operation is needed, so `dp[i][j] = dp[i-1][j-1]`.\n- Otherwise, you have three choices: (1) insert a character in `word1` (add 1 to the previous minimum), (2) delete a character in `word1` (add 1 to the previous minimum), or (3) replace a character in `word1` (add 1 to the previous minimum). Choose the minimum of these three values.\nFinally, return `dp[m][n]` as the minimum edit distance, where `m` and `n` are the lengths of `word1` and `word2`, respectively.",
    "hint": "You can optimize the space complexity by using a one-dimensional array to store only the previous row of the `dp` array."
  },
  "solution": {
    "java": "Here's a Java solution to find the minimum edit distance between two strings using dynamic programming:\n\n```java\npublic int minDistance(String word1, String word2) {\n    int m = word1.length();\n    int n = word2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0) {\n                dp[i][j] = j;\n            } else if (j == 0) {\n                dp[i][j] = i;\n            } else if (word1.charAt(i - 1) == word2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = 1 + Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];\n}\n```",
    "python": "And here's a Python solution to find the minimum edit distance between two strings using dynamic programming:\n\n```python\ndef minDistance(word1, word2):\n    m, n = len(word1), len(word2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif word1[i - 1] == word2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]\n```"
  },
  "extras": {
    "asked": "Finding the minimum edit distance between two strings is a common problem that assesses your understanding of dynamic programming and string manipulation.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice dynamic programming techniques.",
    "relatedlinks": "Related Links:\n- [LeetCode Edit Distance Problem](https://leetcode.com/problems/edit-distance/)\n- [GeeksforGeeks Edit Distance Article](https://www.geeksforgeeks.org/edit-distance-dp-5/)\n- [HackerRank Edit Distance Challenge](https://www.hackerrank.com/challenges/dynamic-programming-classics-the-longest-common-subsequence/)"
  }
}
