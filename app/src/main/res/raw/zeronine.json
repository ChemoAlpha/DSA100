{
  "problem_statement": {
    "title": "Q9. Trapping Rain Water",
    "problemdescription": "Given an array `height` representing the heights of walls, calculate how much rainwater can be trapped between the walls.",
    "problemconstraint": "Constraints:\n- The width of each wall is 1.\n- The height array `height` has at least two elements and can have up to 10^5 elements.\n- Each element in `height` is an integer where 0 <= height[i] <= 10^4.",
    "inputformat": "Input:\n- An array of integers `height` representing the heights of walls.",
    "outputformat": "Output:\n- An integer representing the total units of rainwater that can be trapped.",
    "example": "Example:\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: In this example, 6 units of rainwater (blue section) can be trapped."
  },
  "solution_approach": {
    "solution": "To solve this problem efficiently, you can use a two-pointer approach. Initialize two pointers, one at the beginning and one at the end of the array. Keep track of the maximum heights encountered from the left and right. Calculate the trapped water at each position based on the minimum of the maximum heights from both sides.",
    "hint": "To efficiently calculate trapped rainwater, consider using a two-pointer approach. Move the pointers from both ends towards the center while keeping track of the maximum heights encountered from both sides. Calculate the trapped water at each position based on the minimum of the maximum heights from both sides."
  },
  "solution": {
    "java": "Here's a Java solution for calculating trapped rainwater:\n\n```java\npublic int trap(int[] height) {\n    int left = 0, right = height.length - 1;\n    int leftMax = 0, rightMax = 0;\n    int trappedWater = 0;\n\n    while (left < right) {\n        if (height[left] < height[right]) {\n            if (height[left] >= leftMax) {\n                leftMax = height[left];\n            } else {\n                trappedWater += leftMax - height[left];\n            }\n            left++;\n        } else {\n            if (height[right] >= rightMax) {\n                rightMax = height[right];\n            } else {\n                trappedWater += rightMax - height[right];\n            }\n            right--;\n        }\n    }\n\n    return trappedWater;\n}\n```\nThis Java code efficiently calculates the amount of trapped rainwater between walls.",
    "python": "And here's a Python solution for calculating trapped rainwater:\n\n```python\ndef trap(height):\n    left, right = 0, len(height) - 1\n    left_max, right_max = 0, 0\n    trapped_water = 0\n\n    while left < right:\n        if height[left] < height[right]:\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                trapped_water += left_max - height[left]\n            left += 1\n        else:\n            if height[right] >= right_max:\n                right_max = height[right]\n            else:\n                trapped_water += right_max - height[right]\n            right -= 1\n\n    return trapped_water\n```\nThis Python code efficiently calculates the amount of trapped rainwater between walls."
  },
  "extras": {
    "asked": "The Trapping Rain Water problem is a challenging coding interview question and is commonly used to evaluate problem-solving and algorithmic skills in technical interviews for top tech companies.",
    "sdesheet": "The Trapping Rain Water problem is often included in coding practice sheets, especially for practicing two-pointer techniques and problem-solving with arrays.",
    "relatedlinks": "Related Links:\n- [LeetCode Trapping Rain Water Problem](https://leetcode.com/problems/trapping-rain-water/)\n- [GeeksforGeeks Trapping Rain Water Article](https://www.geeksforgeeks.org/trapping-rain-water/)\n- [HackerRank Trapping Rain Water Challenge](https://www.hackerrank.com/challenges/trapping-rain-water)"
  }
}
