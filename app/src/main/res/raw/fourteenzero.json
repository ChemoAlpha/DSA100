{
  "problem_statement": {
    "title": "Q81. Fibonacci Sequence using Dynamic Programming (Bottom-Up)",
    "problemdescription": "Write a function to calculate the `n`-th Fibonacci number using dynamic programming with a bottom-up approach. The Fibonacci sequence is defined as follows:\n\n- `F(0) = 0`\n- `F(1) = 1`\n- `F(n) = F(n-1) + F(n-2)` for `n > 1`",
    "problemconstraint": "Constraints:\n- 0 <= n <= 30",
    "inputformat": "Input:\n- An integer `n` (0 <= n <= 30).",
    "outputformat": "Output:\n- Return the `n`-th Fibonacci number as an integer.",
    "example": "Example:\n\n```python\nInput: 5\nOutput: 5\nExplanation: F(5) = F(4) + F(3) = 3 + 2 = 5.\n```"
  },
  "solution_approach": {
    "solution": "To calculate the `n`-th Fibonacci number using dynamic programming (bottom-up), you can create an array to store the Fibonacci numbers from 0 to `n`. Initialize the first two values (`F[0]` and `F[1]`) as 0 and 1, respectively. Then, iterate from 2 to `n`, calculating each Fibonacci number as the sum of the previous two (`F[i] = F[i-1] + F[i-2]`). Finally, return `F[n]` as the result.",
    "hint": "You can optimize the space complexity by using two variables to store the previous two Fibonacci numbers instead of an array."
  },
  "solution": {
    "java": "Here's a Java solution to calculate the `n`-th Fibonacci number using dynamic programming (bottom-up):\n\n```java\npublic int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int[] dp = new int[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n}\n```",
    "python": "And here's a Python solution to calculate the `n`-th Fibonacci number using dynamic programming (bottom-up):\n\n```python\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n```"
  },
  "extras": {
    "asked": "Calculating Fibonacci numbers is a common problem that tests your understanding of dynamic programming and recursion.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice dynamic programming techniques.",
    "relatedlinks": "Related Links:\n- [LeetCode Fibonacci Number Problem](https://leetcode.com/problems/fibonacci-number/)\n- [GeeksforGeeks Fibonacci Series](https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/)\n- [HackerRank Fibonacci Sequence Challenge](https://www.hackerrank.com/challenges/ctci-fibonacci-numbers)"
  }
}
