{
  "problem_statement": {
    "title": "Q3. Remove Duplicates from Sorted Array",
    "problemdescription": "Given a sorted array `nums`, remove the duplicates in-place such that each element appears only once and returns the new length. Do not allocate extra space for another array; you must do this by modifying the input array in-place.",
    "problemconstraint": "Constraints:\n- You must modify the input array `nums` in-place with O(1) extra memory.",
    "inputformat": "Input:\n- A sorted integer array `nums`.",
    "outputformat": "Output:\n- An integer, representing the new length of the array after removing duplicates. The modified array should contain unique elements at the beginning.",
    "example": "Example:\n\nInput: nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]\nOutput: 5\nExplanation: The modified array should be [0, 1, 2, 3, 4], and the new length is 5."
  },
  "solution_approach": {
    "solution": "To solve this problem, you can use a two-pointer approach. Initialize two pointers, `slow` and `fast`, both initially set to 0. Iterate through the array with the `fast` pointer. If `nums[fast]` is not equal to `nums[slow]`, increment `slow` and set `nums[slow]` to `nums[fast]`. This way, as you iterate through the array, duplicates are replaced by unique elements, and the unique elements are placed at the beginning of the array. The new length is the value of `slow` plus 1.",
    "hint": "To efficiently remove duplicates from a sorted array in-place, consider using a two-pointer approach. Initialize two pointers, one for the unique elements (`slow`) and one for iterating through the array (`fast`). Compare elements at the `fast` pointer with the `slow` pointer. If they are different, update the `slow` pointer and replace `nums[slow]` with the unique element."
  },
  "solution": {
    "java": "Here's a Java solution for removing duplicates from a sorted array in-place:\n\n```java\npublic int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int slow = 0;\n    for (int fast = 1; fast < nums.length; fast++) {\n        if (nums[fast] != nums[slow]) {\n            slow++;\n            nums[slow] = nums[fast];\n        }\n    }\n    return slow + 1;\n}\n```\nThis code efficiently removes duplicates from the sorted array `nums` in-place and returns the new length.",
    "python": "And here's a Python solution for removing duplicates from a sorted array in-place:\n\n```python\ndef removeDuplicates(nums):\n    if not nums:\n        return 0\n    slow = 0\n    for fast in range(1, len(nums)):\n        if nums[fast] != nums[slow]:\n            slow += 1\n            nums[slow] = nums[fast]\n    return slow + 1\n```\nThis Python code efficiently removes duplicates and returns the new length."
  },
  "extras": {
    "asked": "The Remove Duplicates from Sorted Array problem is frequently asked in coding interviews and is used to assess a candidate's ability to manipulate arrays efficiently in-place.",
    "sdesheet": "The Remove Duplicates from Sorted Array problem is commonly included in coding practice sheets and is used to teach two-pointer techniques for array manipulation.",
    "relatedlinks": "Related Links:\n- [LeetCode Remove Duplicates from Sorted Array Problem](https://leetcode.com/problems/remove-duplicates-from-sorted-array/)\n- [GeeksforGeeks Remove Duplicates from Sorted Array Article](https://www.geeksforgeeks.org/remove-duplicates-sorted-array/)\n- [HackerRank Remove Duplicates from Sorted Array Challenge](https://www.hackerrank.com/challenges/remove-duplicates)"
  }
}
