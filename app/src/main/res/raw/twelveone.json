{
  "problem_statement": {
    "title": "Q72. Merge K Sorted Lists using Min Heap",
    "problemdescription": "Merge `k` sorted linked lists into one sorted list and return it. Analyze and describe its complexity.",
    "problemconstraint": "Constraints:\n- The total number of nodes in all lists is in the range `[0, 10^4]`.\n- `0 <= k <= 10^4`",
    "inputformat": "Input:\n- An array of `k` sorted linked lists, where `k` is the number of linked lists.",
    "outputformat": "Output:\n- Return the head of the merged sorted linked list.",
    "example": "Example:\n\n```python\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked lists are merged into one sorted list.\n```"
  },
  "solution_approach": {
    "solution": "To merge `k` sorted linked lists efficiently, you can use a Min Heap. Start by inserting the first element from each list into the Min Heap. Then, extract the minimum element from the heap and add it to the result list. Continue this process until all elements are processed. This approach ensures that the merged list remains sorted.",
    "hint": "Consider using a priority queue or a Min Heap to efficiently handle the selection of the minimum element among the available choices."
  },
  "solution": {
    "java": "Here's a Java solution to merge `k` sorted linked lists using a Min Heap:\n\n```java\nimport java.util.PriorityQueue;\n\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int val) {\n        this.val = val;\n    }\n}\n\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        PriorityQueue<ListNode> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);\n        for (ListNode list : lists) {\n            if (list != null) {\n                minHeap.offer(list);\n            }\n        }\n        ListNode dummy = new ListNode(0);\n        ListNode current = dummy;\n        while (!minHeap.isEmpty()) {\n            ListNode minNode = minHeap.poll();\n            current.next = minNode;\n            current = current.next;\n            if (minNode.next != null) {\n                minHeap.offer(minNode.next);\n            }\n        }\n        return dummy.next;\n    }\n}\n```",
    "python": "And here's a Python solution to merge `k` sorted linked lists using a Min Heap:\n\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        min_heap = []\n        for list_node in lists:\n            if list_node:\n                min_heap.append((list_node.val, list_node))\n        heapq.heapify(min_heap)\n        dummy = ListNode(0)\n        current = dummy\n        while min_heap:\n            _, min_node = heapq.heappop(min_heap)\n            current.next = min_node\n            current = current.next\n            if min_node.next:\n                heapq.heappush(min_heap, (min_node.next.val, min_node.next))\n        return dummy.next\n```\nThis Python code efficiently merges `k` sorted linked lists using a Min Heap."
  },
  "extras": {
    "asked": "Merging `k` sorted linked lists using a Min Heap is a common interview question that assesses your understanding of data structures and algorithms for sorting and merging.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice merge and heap-related algorithms.",
    "relatedlinks": "Related Links:\n- [LeetCode Merge k Sorted Lists Problem](https://leetcode.com/problems/merge-k-sorted-lists/)\n- [GeeksforGeeks Merge k Sorted Lists Article](https://www.geeksforgeeks.org/merge-k-sorted-linked-lists/)\n- [HackerRank Merge K Sorted Linked Lists Challenge](https://www.hackerrank.com/challenges/merge-k-sorted-linked-lists)"
  }
}
