{
  "problem_statement": {
    "title": "Q71. Implement a Min Heap",
    "problemdescription": "Design and implement a Min Heap data structure with the following operations:\n\n1. `insert(x: int)`: Inserts an element `x` into the Min Heap.\n2. `getMin() -> int`: Returns the minimum element from the Min Heap without removing it.\n3. `extractMin() -> int`: Removes and returns the minimum element from the Min Heap.\n4. `isEmpty() -> bool`: Returns `true` if the Min Heap is empty, and `false` otherwise.",
    "problemconstraint": "Constraints:\n- The input elements are integers with no specific range.\n- The `getMin` and `extractMin` operations should run in O(1) time complexity.",
    "inputformat": "Input:\n- You will implement a `MinHeap` class with the described methods.",
    "outputformat": "Output:\n- For the `getMin` and `extractMin` methods, return the minimum element as an integer, and for the `isEmpty` method, return a boolean value (true or false).",
    "example": "Example:\n\n```python\nminHeap = MinHeap()\nminHeap.insert(3)\nminHeap.insert(2)\nminHeap.getMin()  # Output: 2\nminHeap.insert(1)\nminHeap.extractMin()  # Output: 1\nminHeap.isEmpty()  # Output: False\nminHeap.extractMin()  # Output: 2\nminHeap.extractMin()  # Output: 3\nminHeap.isEmpty()  # Output: True\n```"
  },
  "solution_approach": {
    "solution": "To implement a Min Heap, you can use an array-based representation where the elements satisfy the Min Heap property. Implement the required operations such as insertion, getting the minimum element, and extracting the minimum element while maintaining the Min Heap property.",
    "hint": "Consider the properties of a Min Heap, where each node is smaller than its children, and use this property to implement the required operations efficiently."
  },
  "solution": {
    "java": "Here's a Java solution to implement a Min Heap:\n\n```java\nimport java.util.ArrayList;\n\nclass MinHeap {\n    private ArrayList<Integer> heap;\n\n    public MinHeap() {\n        heap = new ArrayList<>();\n    }\n\n    public void insert(int x) {\n        heap.add(x);\n        int index = heap.size() - 1;\n        heapifyUp(index);\n    }\n\n    public int getMin() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Heap is empty\");\n        }\n        return heap.get(0);\n    }\n\n    public int extractMin() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Heap is empty\");\n        }\n        int min = heap.get(0);\n        int lastElement = heap.remove(heap.size() - 1);\n        if (!isEmpty()) {\n            heap.set(0, lastElement);\n            heapifyDown(0);\n        }\n        return min;\n    }\n\n    public boolean isEmpty() {\n        return heap.isEmpty();\n    }\n\n    private void heapifyUp(int index) {\n        int parentIndex = (index - 1) / 2;\n        while (index > 0 && heap.get(index) < heap.get(parentIndex)) {\n            swap(index, parentIndex);\n            index = parentIndex;\n            parentIndex = (index - 1) / 2;\n        }\n    }\n\n    private void heapifyDown(int index) {\n        int leftChildIndex = 2 * index + 1;\n        int rightChildIndex = 2 * index + 2;\n        int smallest = index;\n        if (leftChildIndex < heap.size() && heap.get(leftChildIndex) < heap.get(smallest)) {\n            smallest = leftChildIndex;\n        }\n        if (rightChildIndex < heap.size() && heap.get(rightChildIndex) < heap.get(smallest)) {\n            smallest = rightChildIndex;\n        }\n        if (smallest != index) {\n            swap(index, smallest);\n            heapifyDown(smallest);\n        }\n    }\n\n    private void swap(int i, int j) {\n        int temp = heap.get(i);\n        heap.set(i, heap.get(j));\n        heap.set(j, temp);\n    }\n}\n```",
    "python": "And here's a Python solution to implement a Min Heap:\n\n```python\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, x: int) -> None:\n        self.heap.append(x)\n        index = len(self.heap) - 1\n        self._heapify_up(index)\n\n    def getMin(self) -> int:\n        if self.is_empty():\n            raise Exception(\"Heap is empty\")\n        return self.heap[0]\n\n    def extractMin(self) -> int:\n        if self.is_empty():\n            raise Exception(\"Heap is empty\")\n        min_value = self.heap[0]\n        last_element = self.heap.pop()\n        if not self.is_empty():\n            self.heap[0] = last_element\n            self._heapify_down(0)\n        return min_value\n\n    def is_empty(self) -> bool:\n        return len(self.heap) == 0\n\n    def _heapify_up(self, index):\n        parent_index = (index - 1) // 2\n        while index > 0 and self.heap[index] < self.heap[parent_index]:\n            self._swap(index, parent_index)\n            index = parent_index\n            parent_index = (index - 1) // 2\n\n    def _heapify_down(self, index):\n        left_child_index = 2 * index + 1\n        right_child_index = 2 * index + 2\n        smallest = index\n        if left_child_index < len(self.heap) and self.heap[left_child_index] < self.heap[smallest]:\n            smallest = left_child_index\n        if right_child_index < len(self.heap) and self.heap[right_child_index] < self.heap[smallest]:\n            smallest = right_child_index\n        if smallest != index:\n            self._swap(index, smallest)\n            self._heapify_down(smallest)\n\n    def _swap(self, i, j):\n        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n```\nThis Python code provides a Min Heap implementation."
  },
  "extras": {
    "asked": "Implementing a Min Heap is a common interview question that assesses your understanding of heap data structures and their operations.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice heap-related algorithms and data structure implementation.",
    "relatedlinks": "Related Links:\n- [GeeksforGeeks Min Heap Article](https://www.geeksforgeeks.org/min-heap-in-java/)\n- [GeeksforGeeks Min Heap in Python](https://www.geeksforgeeks.org/min-heap-in-python/)\n- [HackerRank Min Heap Challenge](https://www.hackerrank.com/challenges/qheap1)"
  }
}
