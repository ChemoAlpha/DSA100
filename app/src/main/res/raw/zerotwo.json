{
  "problem_statement": {
    "title": "Q2. Maximum Subarray",
    "problemdescription": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) that has the largest sum and return its sum.",
    "problemconstraint": "Constraints:\n- Your solution should have a time complexity of O(n) where `n` is the length of the array `nums`.\n- You may assume that there is always at least one element in the input array.",
    "inputformat": "Input:\n- An integer array `nums`.",
    "outputformat": "Output:\n- An integer, the maximum sum of any contiguous subarray in `nums`.",
    "example": "Example:\n\nInput: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nOutput: 6\nExplanation: The contiguous subarray [4, -1, 2, 1] has the largest sum of 6."
  },
  "solution_approach": {
    "solution": "To solve this problem, you can use the Kadane's algorithm, which is an efficient dynamic programming approach. Initialize two variables, `currentMax` and `globalMax`, both initially set to the first element of the array. Then, iterate through the array from the second element onwards. For each element, update `currentMax` to be the maximum of the current element and the sum of the current element and `currentMax`. Update `globalMax` to be the maximum of `globalMax` and `currentMax`. After iterating through the array, `globalMax` will hold the maximum sum of any contiguous subarray.",
    "hint": "To efficiently find the maximum subarray sum, consider using Kadane's algorithm. Initialize variables to keep track of the current maximum subarray sum (`currentMax`) and the global maximum subarray sum (`globalMax`). Iterate through the array, updating `currentMax` with the maximum of the current element and the sum of the current element and `currentMax`. Update `globalMax` with the maximum of `globalMax` and `currentMax` during each iteration."
  },
  "solution": {
    "java": "Here's a Java solution for finding the maximum subarray sum using Kadane's algorithm:\n\n```java\npublic int maxSubArray(int[] nums) {\n    int currentMax = nums[0];\n    int globalMax = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        currentMax = Math.max(nums[i], currentMax + nums[i]);\n        globalMax = Math.max(globalMax, currentMax);\n    }\n    return globalMax;\n}\n```\nThis code efficiently finds the maximum subarray sum in the given integer array `nums`.",
    "python": "And here's a Python solution for finding the maximum subarray sum using Kadane's algorithm:\n\n```python\ndef maxSubArray(nums):\n    currentMax = globalMax = nums[0]\n    for num in nums[1:]:\n        currentMax = max(num, currentMax + num)\n        globalMax = max(globalMax, currentMax)\n    return globalMax\n```\nThis Python code efficiently calculates the maximum subarray sum."
  },
  "extras": {
    "asked": "The Maximum Subarray problem is frequently asked in coding interviews and is used to evaluate a candidate's understanding of dynamic programming and efficient algorithms.",
    "sdesheet": "The Maximum Subarray problem is a common topic in coding practice sheets and is often used to teach dynamic programming techniques.",
    "relatedlinks": "Related Links:\n- [LeetCode Maximum Subarray Problem](https://leetcode.com/problems/maximum-subarray/)\n- [GeeksforGeeks Maximum Subarray Sum Article](https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/)\n- [HackerRank Maximum Subarray Sum Challenge](https://www.hackerrank.com/challenges/maxsubarray)"
  }
}
