{
  "problem_statement": {
    "title": "Q29. Design a Hash Set",
    "problemdescription": "Design a HashSet without using any built-in hash table libraries.",
    "problemconstraint": "Constraints:\n- All values will be in the range [0, 1000000].\n- The number of operations will be in the range [1, 1000].\n- All operations are guaranteed to be valid.",
    "inputformat": "Input:\n- You will be given a list of operations. Each operation consists of a string (\"add\", \"remove\", or \"contains\") and an integer value to be operated on.",
    "outputformat": "Output:\n- For each \"contains\" operation, return true if the value is in the HashSet and false otherwise.",
    "example": "Example:\n\nInput:\n[\"MyHashSet\",\"add\",\"add\",\"contains\",\"contains\",\"add\",\"contains\",\"remove\",\"contains\"]\n[[],[1],[2],[1],[3],[2],[2],[2],[2]]\nOutput:\n[null,null,null,true,false,null,true,null,true]\nExplanation: Initially, the HashSet is empty. The operations are performed as follows:\n- MyHashSet is initialized.\n- Add 1 to the HashSet. HashSet now contains [1].\n- Add 2 to the HashSet. HashSet now contains [1, 2].\n- Check if 1 is in the HashSet, which is true.\n- Check if 3 is in the HashSet, which is false.\n- Add 2 to the HashSet (duplicate, no effect). HashSet remains [1, 2].\n- Check if 2 is in the HashSet, which is true.\n- Remove 2 from the HashSet. HashSet now contains [1].\n- Check if 2 is in the HashSet, which is false."
  },
  "solution_approach": {
    "solution": "To design a HashSet, you can implement a basic hash table with the following operations:\n- Add: Insert the value into the hash table.\n- Remove: Delete the value from the hash table if it exists.\n- Contains: Check if the value exists in the hash table and return true or false accordingly.",
    "hint": "To implement a HashSet, consider using a data structure like an array of linked lists (chaining) or an array of boolean values. You can design a simple hash function to map values to indices in the array. For handling collisions, use linked lists or handle them within the boolean array."
  },
  "solution": {
    "java": "Here's a Java implementation of a HashSet:\n\n```java\nclass MyHashSet {\n    private boolean[] set;\n\n    public MyHashSet() {\n        set = new boolean[1000001];\n    }\n\n    public void add(int key) {\n        set[key] = true;\n    }\n\n    public void remove(int key) {\n        set[key] = false;\n    }\n\n    public boolean contains(int key) {\n        return set[key];\n    }\n}\n```\nThis code provides a simple implementation of a HashSet using a boolean array.",
    "python": "And here's a Python implementation of a HashSet:\n\n```python\nclass MyHashSet:\n    def __init__(self):\n        self.set = [False] * 1000001\n\n    def add(self, key: int) -> None:\n        self.set[key] = True\n\n    def remove(self, key: int) -> None:\n        self.set[key] = False\n\n    def contains(self, key: int) -> bool:\n        return self.set[key]\n```\nThis code implements a basic HashSet using a boolean list."
  },
  "extras": {
    "asked": "Designing a HashSet is a common problem in coding interviews and tests a candidate's ability to design and implement data structures.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice data structure design and implementation.",
    "relatedlinks": "Related Links:\n- [LeetCode Design HashSet Problem](https://leetcode.com/problems/design-hashset/)\n- [GeeksforGeeks Hashing](https://www.geeksforgeeks.org/hashing-set-3-open-addressing/)\n- [HackerRank HashSet Challenge](https://www.hackerrank.com/challenges/ctci-contacts)"
  }
}
