{
  "problem_statement": {
    "title": "Q91. Longest Common Subsequence using Dynamic Programming",
    "problemdescription": "Given two strings `text1` and `text2`, return the length of their longest common subsequence (LCS). A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. (For example, 'ace' is a subsequence of 'abcde' while 'aec' is not).",
    "problemconstraint": "Constraints:\n- 1 <= text1.length, text2.length <= 1000\n- text1 and text2 consist of only lowercase English characters.",
    "inputformat": "Input:\n- Two strings `text1` and `text2`.",
    "outputformat": "Output:\n- Return an integer representing the length of the longest common subsequence (LCS) of `text1` and `text2`.",
    "example": "Example:\n\n```python\nInput: text1 = 'abcde', text2 = 'ace'\nOutput: 3\nExplanation: The longest common subsequence is 'ace', which has a length of 3.\n```"
  },
  "solution_approach": {
    "solution": "To find the length of the Longest Common Subsequence (LCS) using dynamic programming, you can create a two-dimensional array `dp` where `dp[i][j]` represents the length of LCS between the first `i` characters of `text1` and the first `j` characters of `text2`. Initialize the `dp` array with appropriate base cases and then iterate through the characters of `text1` and `text2`. If the characters match, you can extend the LCS length by 1. Otherwise, you take the maximum of the LCS lengths from the previous characters. Here's an algorithmic approach:\n\n1. Create a 2D array `dp` of size (m+1) x (n+1), where m and n are the lengths of `text1` and `text2` respectively.\n2. Initialize the first row and first column of `dp` to 0 because the LCS of an empty string and any string is 0.\n3. Iterate through the characters of `text1` and `text2` using nested loops.\n4. If the characters match (i.e., `text1[i-1] == text2[j-1]`), set `dp[i][j] = dp[i-1][j-1] + 1`.\n5. If the characters don't match, set `dp[i][j]` to the maximum of `dp[i-1][j]` and `dp[i][j-1]`.\n6. The value in `dp[m][n]` represents the length of the LCS of `text1` and `text2`.\n7. Return `dp[m][n]` as the result.",
    "hint": "You can use a two-dimensional array to store the LCS lengths and leverage dynamic programming to fill the array efficiently."
  },
  "solution": {
    "java": "Here's a Java solution to find the length of the Longest Common Subsequence (LCS) using dynamic programming:\n\n```java\npublic int longestCommonSubsequence(String text1, String text2) {\n    int m = text1.length();\n    int n = text2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (text1.charAt(i - 1) == text2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];\n}\n```",
    "python": "And here's a Python solution to find the length of the Longest Common Subsequence (LCS) using dynamic programming:\n\n```python\ndef longestCommonSubsequence(text1, text2):\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```"
  },
  "extras": {
    "asked": "Finding the length of the Longest Common Subsequence (LCS) is a classic problem that assesses your understanding of dynamic programming and problem-solving skills.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice dynamic programming techniques and algorithmic problem-solving.",
    "relatedlinks": "Related Links:\n- [LeetCode Longest Common Subsequence Problem](https://leetcode.com/problems/longest-common-subsequence/)\n- [GeeksforGeeks Longest Common Subsequence Article](https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/)\n- [HackerRank Longest Common Subsequence Challenge](https://www.hackerrank.com/challenges/dynamic-programming-classics-the-longest-common-subsequence/)"
  }
}
