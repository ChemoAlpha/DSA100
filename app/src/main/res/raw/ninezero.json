{
  "problem_statement": {
    "title": "Q50. Reverse a Linked List",
    "problemdescription": "Given the head of a singly linked list, reverse the list and return its head.",
    "problemconstraint": "Constraints:\n- The number of nodes in the list is in the range [0, 5000].\n- -5000 <= Node.val <= 5000",
    "inputformat": "Input:\n- The head of a singly linked list.",
    "outputformat": "Output:\n- The head of the reversed linked list.",
    "example": "Example:\n\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\nExplanation: The linked list is reversed."
  },
  "solution_approach": {
    "solution": "To reverse a linked list, you can use the iterative or recursive approach. In the iterative approach, you maintain three pointers: 'prev', 'current', and 'next'. Initialize 'prev' as null and 'current' as the head. While 'current' is not null, update 'next' to 'current.next', set 'current.next' to 'prev', move 'prev' and 'current' one step forward. At the end, 'prev' will be the new head of the reversed list. In the recursive approach, you recursively reverse the 'next' node and point 'current.next' to 'prev'.",
    "hint": "You can reverse a linked list iteratively or recursively. In the iterative approach, maintain three pointers: 'prev', 'current', and 'next'. Initialize 'prev' as null and 'current' as the head. While 'current' is not null, update 'next' to 'current.next', set 'current.next' to 'prev', move 'prev' and 'current' one step forward. At the end, 'prev' will be the new head of the reversed list."
  },
  "solution": {
    "java": "Here's a Java solution to reverse a linked list iteratively:\n\n```java\npublic ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    ListNode current = head;\n    while (current != null) {\n        ListNode next = current.next;\n        current.next = prev;\n        prev = current;\n        current = next;\n    }\n    return prev;\n}\n```\nThis Java code efficiently reverses a singly linked list.",
    "python": "And here's a Python solution to reverse a linked list recursively:\n\n```python\nclass ListNode:\n    def reverseList(self, head):\n        if head is None or head.next is None:\n            return head\n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head\n```\nThis Python code effectively reverses a singly linked list using recursion."
  },
  "extras": {
    "asked": "Reversing a linked list is a frequently asked coding interview question. It assesses your understanding of linked list manipulation.",
    "sdesheet": "This problem is commonly included in coding practice sheets to help candidates practice linked list reversal techniques.",
    "relatedlinks": "Related Links:\n- [LeetCode Reverse Linked List Problem](https://leetcode.com/problems/reverse-linked-list/)\n- [GeeksforGeeks Reverse a Linked List Article](https://www.geeksforgeeks.org/reverse-a-linked-list/)\n- [HackerRank Reverse a Linked List Challenge](https://www.hackerrank.com/challenges/reverse-a-linked-list)"
  }
}
