{
  "problem_statement": {
    "title": "Q83. 0/1 Knapsack Problem using Dynamic Programming",
    "problemdescription": "Given weights and values of `n` items, put these items in a knapsack of capacity `W` to get the maximum total value in the knapsack without exceeding the weight limit. Each item can only be selected once, which is why it's called the 0/1 Knapsack Problem.",
    "problemconstraint": "Constraints:\n- 1 <= n <= 100\n- 1 <= weights[i], values[i] <= 100\n- 1 <= W <= 100",
    "inputformat": "Input:\n- Two integer arrays `weights` and `values`, each of length `n`, where `weights[i]` and `values[i]` represent the weight and value of the `i`-th item, respectively.\n- An integer `W`, the maximum capacity of the knapsack.",
    "outputformat": "Output:\n- Return an integer representing the maximum value that can be obtained by filling the knapsack.",
    "example": "Example:\n\n```python\nInput: weights = [10, 20, 30], values = [60, 100, 120], W = 50\nOutput: 220\nExplanation: Select items with weights 10 and 20 to maximize the total value (100 + 120 = 220) without exceeding the knapsack capacity."
  },
  "solution_approach": {
    "solution": "To solve the 0/1 Knapsack Problem using dynamic programming, you can create a two-dimensional array `dp` where `dp[i][w]` represents the maximum value that can be obtained with the first `i` items and a knapsack capacity of `w`. Initialize the `dp` array with zeros. Then, iterate through the items and capacity values and fill in the `dp` array based on the following rules:\n- If the weight of the current item (`weights[i-1]`) is less than or equal to `w`, you have two choices: include the current item or exclude it. Choose the maximum of these two values.\n- If the weight of the current item is greater than `w`, you cannot include it, so the value remains the same as the previous row in the `dp` array.\nFinally, return `dp[n][W]` as the maximum value that can be obtained.",
    "hint": "You can optimize the space complexity by using a one-dimensional array `dp` and updating it in reverse order, as you only need information from the previous row."
  },
  "solution": {
    "java": "Here's a Java solution to solve the 0/1 Knapsack Problem using dynamic programming:\n\n```java\npublic int knapsack(int W, int[] weights, int[] values) {\n    int n = weights.length;\n    int[] dp = new int[W + 1];\n    for (int i = 0; i < n; i++) {\n        for (int w = W; w >= weights[i]; w--) {\n            dp[w] = Math.max(dp[w], dp[w - weights[i]] + values[i]);\n        }\n    }\n    return dp[W];\n}\n```",
    "python": "And here's a Python solution to solve the 0/1 Knapsack Problem using dynamic programming:\n\n```python\ndef knapsack(W, weights, values):\n    n = len(weights)\n    dp = [0] * (W + 1)\n    for i in range(n):\n        for w in range(W, weights[i] - 1, -1):\n            dp[w] = max(dp[w], dp[w - weights[i]] + values[i])\n    return dp[W]\n```"
  },
  "extras": {
    "asked": "The 0/1 Knapsack Problem is a classic optimization problem that tests your understanding of dynamic programming and problem-solving skills.",
    "sdesheet": "This problem is often included in coding practice sheets to help candidates practice dynamic programming techniques.",
    "relatedlinks": "Related Links:\n- [LeetCode 0/1 Knapsack Problem](https://leetcode.com/problems/01-knapsack/)\n- [GeeksforGeeks 0/1 Knapsack Problem Article](https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/)\n- [HackerRank 0/1 Knapsack Challenge](https://www.hackerrank.com/challenges/ctci-knapsack)"
  }
}
