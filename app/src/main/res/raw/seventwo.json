{
  "problem_statement": {
    "title": "Q42. Find First and Last Position of Element in Sorted Array",
    "problemdescription": "Given an array of integers sorted in ascending order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1].",
    "problemconstraint": "Constraints:\n- You must implement binary search and not sequential search.",
    "inputformat": "Input:\n- A sorted array of integers (nums).\n- A target integer (target).",
    "outputformat": "Output:\n- An array of two integers [first, last] representing the first and last occurrence of the target in the array (return [-1, -1] if not found).",
    "example": "Example:\n\nInput: nums = [5, 7, 7, 8, 8, 10], target = 8\nOutput: [3, 4]\nExplanation: The target '8' appears at indices '3' and '4' in the sorted array."
  },
  "solution_approach": {
    "solution": "To find the first and last position of a target in a sorted array, you can use binary search twice. First, find the left boundary (first occurrence) of the target, and then find the right boundary (last occurrence).",
    "hint": "Use binary search to find the left boundary and then again to find the right boundary. Be careful when handling edge cases."
  },
  "solution": {
    "java": "Here's a Java solution for finding the first and last position of a target in a sorted array:\n\n```java\npublic int[] searchRange(int[] nums, int target) {\n    int[] result = new int[] { -1, -1 };\n    int left = findLeftBoundary(nums, target);\n    if (left == -1) {\n        return result;\n    }\n    int right = findRightBoundary(nums, target);\n    result[0] = left;\n    result[1] = right;\n    return result;\n}\n\nprivate int findLeftBoundary(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            if (mid == 0 || nums[mid - 1] != target) {\n                return mid;\n            } else {\n                right = mid - 1;\n            }\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n\nprivate int findRightBoundary(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            if (mid == nums.length - 1 || nums[mid + 1] != target) {\n                return mid;\n            } else {\n                left = mid + 1;\n            }\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n```\nThis Java code efficiently finds the first and last occurrence of a target in a sorted array.",
    "python": "And here's a Python solution for finding the first and last position of a target in a sorted array:\n\n```python\ndef searchRange(nums, target):\n    result = [-1, -1]\n    left = findLeftBoundary(nums, target)\n    if left == -1:\n        return result\n    right = findRightBoundary(nums, target)\n    result[0] = left\n    result[1] = right\n    return result\n\n\ndef findLeftBoundary(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            if mid == 0 or nums[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\ndef findRightBoundary(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            if mid == len(nums) - 1 or nums[mid + 1] != target:\n                return mid\n            else:\n                left = mid + 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\nThis Python code effectively finds the first and last position of a target in a sorted array."
  },
  "extras": {
    "asked": "Finding the first and last position of an element in a sorted array is a common coding interview question. It tests your understanding of binary search and array manipulation.",
    "sdesheet": "This problem is frequently included in coding practice sheets to help candidates practice binary search and problem-solving.",
    "relatedlinks": "Related Links:\n- [LeetCode Find First and Last Position Problem](https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/)\n- [GeeksforGeeks Find First and Last Position Article](https://www.geeksforgeeks.org/find-first-and-last-positions-of-an-element-in-a-sorted-array/)\n- [HackerRank Find First and Last Position Challenge](https://www.hackerrank.com/challenges/find-first-and-last-position-of-element-in-sorted-array)"
  }
}
