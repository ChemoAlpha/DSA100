{
  "problem_statement": {
    "title": "Q7. 3Sum",
    "problemdescription": "Given an array `nums` of n integers, find all unique triplets in the array which gives the sum of zero.",
    "problemconstraint": "Constraints:\n- The solution set must not contain duplicate triplets.\n- A triplet (a, b, c) must satisfy that a + b + c = 0.",
    "inputformat": "Input:\n- An array of integers `nums` (where 0 <= n <= 3000).\n",
    "outputformat": "Output:\n- A list of lists containing unique triplets that sum up to zero.",
    "example": "Example:\n\nInput: nums = [-1, 0, 1, 2, -1, -4]\nOutput: [[-1, -1, 2], [-1, 0, 1]]\nExplanation: The solution set includes two unique triplets that sum to zero: [-1, -1, 2] and [-1, 0, 1]."
  },
  "solution_approach": {
    "solution": "To solve this problem, you can sort the input array `nums` and use a two-pointer approach. Iterate through the array, fix one element, and find the other two elements using two pointers. Ensure that you skip duplicates to avoid duplicate triplets. This approach ensures O(n^2) complexity.",
    "hint": "To efficiently find unique triplets that sum to zero, consider sorting the array and using a two-pointer approach. Fix one element and find the other two elements using two pointers. Be sure to handle duplicate elements to avoid duplicate triplets."
  },
  "solution": {
    "java": "Here's a Java solution for finding unique triplets that sum to zero:\n\n```java\npublic List<List<Integer>> threeSum(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    Arrays.sort(nums);\n    int n = nums.length;\n    for (int i = 0; i < n - 2; i++) {\n        if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {\n            int left = i + 1, right = n - 1, target = -nums[i];\n            while (left < right) {\n                if (nums[left] + nums[right] == target) {\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    while (left < right && nums[left] == nums[left + 1]) left++;\n                    while (left < right && nums[right] == nums[right - 1]) right--;\n                    left++;\n                    right--;\n                } else if (nums[left] + nums[right] < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    return result;\n}\n```\nThis Java code efficiently finds unique triplets that sum to zero in an array.",
    "python": "And here's a Python solution for finding unique triplets that sum to zero:\n\n```python\ndef threeSum(nums):\n    result = []\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        if i == 0 or (i > 0 and nums[i] != nums[i - 1]):\n            left, right, target = i + 1, n - 1, -nums[i]\n            while left < right:\n                if nums[left] + nums[right] == target:\n                    result.append([nums[i], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]: left += 1\n                    while left < right and nums[right] == nums[right - 1]: right -= 1\n                    left += 1\n                    right -= 1\n                elif nums[left] + nums[right] < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result\n```\nThis Python code efficiently finds unique triplets that sum to zero in an array."
  },
  "extras": {
    "asked": "The 3Sum problem is a frequently asked coding interview question and is commonly encountered in technical interviews at top tech companies.",
    "sdesheet": "The 3Sum problem is often included in coding practice sheets and is used to teach the application of two-pointer techniques for solving problems.",
    "relatedlinks": "Related Links:\n- [LeetCode 3Sum Problem](https://leetcode.com/problems/3sum/)\n- [GeeksforGeeks 3Sum Article](https://www.geeksforgeeks.org/3sum/)\n- [HackerRank 3Sum Challenge](https://www.hackerrank.com/challenges/3sum)"
  }
}
